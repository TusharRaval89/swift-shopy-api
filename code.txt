exports.addToCart = async function (req, res) {
    try {
        const { productId, quantity } = req.body;
        const userId = req.user.id; // Assuming user is authenticated

        // Validate product
        const product = await PRODUCT.findById(productId);
        if (!product) {
            return res.status(404).json({ status: 'Fail', message: 'Product not found' });
        }

        let cart = await CART.findOne({ user: userId });

        if (!cart) {
            cart = new CART({ user: userId, items: [], totalPrice: 0 }).populate('items.productId');
        }

        // Check if product already exists in cart
        const existingItem = cart.items.find(item => item.product.toString() === productId);

        if (existingItem) {
            existingItem.quantity = quantity;
        } else {
            cart.items.push({
                product: productId,
                quantity,
                price: product.discountPrice || product.price
            });
        }

        // Update total price
        cart.totalPrice = cart.items.reduce((total, item) => total + (item.quantity * item.price), 0);

        await cart.save();

        res.status(200).json({ status: 'Success', message: 'Product added to cart', cart });

    } catch (error) {
        res.status(500).json({ status: 'Fail', message: error.message });
    }
};


exports.getCart = async function (req, res) {
    try {
        const userId = req.user.id; // Assuming user is authenticated

        const cart = await CART.findOne({ user: userId })
            .populate({
                path: 'items.product', 
                select: 'title price thumbnail images category highestPurchase rating discountPercentage discountPrice description',
                populate: {
                    path: 'category',  // Populate category inside product
                    select: 'category'     // Select only the category name
                }
            });

        if (!cart) {
            return res.status(404).json({ status: 'Fail', message: 'Cart is empty' });
        }

        res.status(200).json({ status: 'Success', message: 'Cart fetched successfully', cart });

    } catch (error) {
        res.status(500).json({ status: 'Fail', message: error.message });
    }
};